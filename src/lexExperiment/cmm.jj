/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(cmm)package lexExperiment;

public class cmm{
  public static void main(String args []) throws ParseException  {    cmm parser = new cmm(System.in);    while (true)    {      System.out.println("------Reading from standard input-------");
      System.out.println("Please enter a CMM program for analysis (finally enter $to start analysis) or enter # exit:");      try      {        switch (parser.one_line())        {          case 0 : 
          System.out.println("Success!");
          break;
          case 1 : 
          System.out.println("Good bye!");
          break;
          default : 
          break;        }      }      catch (Exception e)      {        System.out.println("Fail!.");
        System.out.println(e.getMessage());
        parser.ReInit(System.in);
      }      catch (Error e)      {        System.out.println("Error!.");
        System.out.println(e.getMessage());
        break;      }    }  }}PARSER_END(cmm)SKIP :  /*跳过*/
{
  " "
| "\r"
| "\t"
| "\n"
| "\r\n"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}TOKEN : /*定义操作符*/
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
}
TOKEN : /*定义关系符*/
{
  < LT : "<" >
| < GT : " >" >
| < LEQ : "<=" >
| < GEQ : ">=" >
| < EQ : "==" >
| < NEQ : "<>" >
}
TOKEN : /*定义括号*/
{
  < LPARENTHESES : "(" >
| < RPARENTHESES : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
}
TOKEN : /*定义保留字*/
{
  < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < READ : "read" >
| < WRITE : "write" >
| < INT : "int" >
| < REAL : "real" >
}
TOKEN : /*定义其他符号*/
{
  < COMMA : "," >
| < SEMICOLON : ";" >
| < COLON : ":" >
| < UNDERLINE : "_" >
}
TOKEN :  /*定义整数和实数*/
{
  < POSITIVEINT : [ "1"-"9" ] (< DIGIT >)* >
| < REALNUMBER :
    (
      (< DIGIT >)+ "." (< DIGIT >)+
    )
  | "0." (< DIGIT >)+ >
  //| < CONSTANT : (["0"] | ["1"-"9"](<DIGIT>)*) | (<INTEGER>"."(<DIGIT>)+) >
| < #DIGIT : [ "0"-"9" ] >
| < #DIGIT_0 : [ "1"-"9" ] >
}
TOKEN : /*定义标识符*/
{
  < IDENTIFIER :
    [ "a"-"z", "A"-"Z" ]
    (
      ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])* ([ "a"-"z", "A"-"Z", "0"-"9" ])
    )? >
}
int one_line() :
{}
{
  procedure()"$"
  {
    return 0;
  }
| "#"
  {
    return 1;
  }
}
void sum() :     /*算术表达式*/
{}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}
void term() :    /*项*/
{}
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    )
    unary()
  )*
}
void unary() :  /*一元式*/
{}
{
  < MINUS > element()
| element()
}
void element() :    /*元素*/
{}
{
  (
    < POSITIVEINT >
  | < REALNUMBER >
  )
| < IDENTIFIER > (< LBRACKET > < POSITIVEINT > < RBRACKET >)?
| < LPARENTHESES > sum() < RPARENTHESES >
}
void relational() :  /*关系表达式*/
{
}
{
  (
    < IDENTIFIER >
  | sum()
  )
  (
    (
      < LT >
    | < GT >
    | < LEQ >
    | < GEQ >
    | < EQ >
    | < NEQ >
    )
    (
      < IDENTIFIER >
    | sum()
    )
  )+
}
void declaration() :    /*声明语句*/
{}
{
  (
    < INT >
  | < REAL >
  )
  < IDENTIFIER >
  (
    < LBRACKET > (< POSITIVEINT >)? < RBRACKET >
    (
      < ASSIGN > < LBRACE >
      (
        sum()
        (
          < COMMA > sum()
        )*
      )?
      < RBRACE >
    )?
    (
      < COMMA > < IDENTIFIER >
      (
        (
          < LBRACKET > (< POSITIVEINT >)? < RBRACKET >
          (
            < ASSIGN > < LBRACE >
            (
              sum()
              (
                < COMMA > sum()
              )*
            )?
            < RBRACE >
          )?
        )
      |
        (
          < ASSIGN > sum()
        )?
      )
    )*
    < SEMICOLON >
  |
    (
      < ASSIGN > sum()
    )?
    (
      < COMMA > < IDENTIFIER >
      (
        (
          < LBRACKET > (< POSITIVEINT >)? < RBRACKET >
          (
            < ASSIGN > < LBRACE >
            (
              sum()
              (
                < COMMA > sum()
              )*
            )?
            < RBRACE >
          )?
        )
      |
        (
          < ASSIGN > sum()
        )?
      )
    )*
    < SEMICOLON >
  )
}
void assignment() : /*赋值语句*/
{}
{
  < IDENTIFIER >
  (
    < LBRACKET > < POSITIVEINT > < RBRACKET > < ASSIGN > sum()
    (
      < COMMA > < IDENTIFIER >
      (
        (
          < LBRACKET > < POSITIVEINT > < RBRACKET > < ASSIGN > sum()
        )
      |
        (
          < ASSIGN > sum()
        )
      )
    )*
    < SEMICOLON >
  | < ASSIGN > sum()
    (
      < COMMA > < IDENTIFIER >
      (
        (
          < LBRACKET > < POSITIVEINT > < RBRACKET > < ASSIGN > sum()
        )
      |
        (
          < ASSIGN > sum()
        )
      )
    )*
    < SEMICOLON >
  )
}
void read() :   /*read语句*/
{}
{
  < READ > < LPARENTHESES > < IDENTIFIER >
  (
    < LBRACKET >
    (
      < POSITIVEINT >
    | < IDENTIFIER >
    )
    < RBRACKET >
  )?
  < RPARENTHESES > < SEMICOLON >
}
void write() :  /*write语句*/
{}
{
  < WRITE > < LPARENTHESES >
  (
    < IDENTIFIER >
  | sum()
  )
  < RPARENTHESES > < SEMICOLON >
}
void conditionStatement() :  /*if-else语句*/
{}
{
  < IF > < LPARENTHESES > relational() < RPARENTHESES >
  (
    (
      < LBRACE >
      (
        statement()
      )*
      < RBRACE >
    )
  | statement()
  )
  (
    < ELSE >
    (
      (
        < LBRACE >
        (
          statement()
        )*
        < RBRACE >
      )
    | statement()
    )
  )?
}
void whileStatement() :  /*while语句*/
{}
{
  < WHILE > < LPARENTHESES > relational() < RPARENTHESES >
  (
    (
      < LBRACE >
      (
        statement()
      )*
      < RBRACE >
    )
  | statement()
  )
}
void statement() :  /*语句*/
{}
{
  < SEMICOLON >
| declaration()
| assignment()
  //| relational() <SEMICOLON> 
| sum() < SEMICOLON >
| read()
| write()
| conditionStatement()
| whileStatement()
}
void procedure() :  /*程序*/
{}
{
  < SEMICOLON >
| declaration()
| assignment()
| read()
| write()
| < LBRACE >
  (
    statement()
  )*
  < RBRACE >
}